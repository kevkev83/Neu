report AQA0ZWM_LGVER===ZWM_LAGP======
   line-size 083 no standard page heading line-count 000(001).

include <symbol>.
include <icon>.
data: %RTMODE type aqlimode,
      %IQID   type aqliqid,
      %gcprog type PROGRAMM.

selection-screen: begin of block prog
                           with frame title text-f58.

tables LAGP.
data %count-LAGP(4) type x.
data %linr-LAGP(2).

select-options ZLGNUM for LAGP-LGNUM
            OBLIGATORY NO INTERVALS NO-EXTENSION DEFAULT '110' .
tables aqldb.

include rsaqexcd.

data: begin of %st_liste occurs 100,
          head(1),
          tab(3),
          line(6) type n,
          cont(1) type n,
          fint(1),
          finv(1),
          fcol(1) type n,
          text(0083),
      end of %st_liste.

data %data_selected(1).
data %glframe(1)  value 'X' .
data %uflag(1).
data %ustflag(1).
data %grst_text(255).
data %glline type i.
data %tabix like sy-tabix.
data %prflag(1) type x value '02'.


data: %textpool_read(1),
      %textpool_langu type textpool occurs 0,
      %textpool_langu_line type textpool.
data: %txt1        type textpool-entry,
       %txt2        type textpool-entry,
       %txt3        type textpool-entry,
       %txtkey      type textpool-key,
       %txt_unknown type textpool-entry value 'UNKNOWN TEXT'.


data TEXT_LAGP_KZLER like DD07D-DDTEXT.
data TEXT_LAGP_LGNUM like T300T-LNUMT.
data TEXT_LAGP_LGTYP like T301T-LTYPT.
data ZBEL type I .
data ZGES type I .
data ZLEER type I .
data %perc(4) type p decimals 3.
data %p100(4) type p decimals 3 value '100.000'.
data %rangct type i.
data %rangcc(8).
data %hwaer(16) type p decimals 02.
data %heinh3(16) type p decimals 03.
data %heinh6(16) type p decimals 06.
data: begin of T01 occurs 100,
            LAGP-LGTYP like LAGP-LGTYP,
            ZBEL type I,
            ZLEER type I,
            ZGES type I,
      end of T01.
data: begin of %t01,
            LAGP-LGTYP(003),
            ZBEL(011),
            ZLEER(011),
            ZGES(011),
      end of %t01.
data: begin of s01.
            include structure t01.
data: end of s01.
select-options SP$00002 for LAGP-LGTYP memory id LGT.
select-options SP$00003 for LAGP-KZLER.
select-options SP$00004 for LAGP-ANZQU.
selection-screen skip 1.
selection-screen: begin of block direct
                  with frame title text-f59.
selection-screen: begin of line.
*selection-screen: comment 1(12) text-f57.
selection-screen: pushbutton 75(18) pb%exco user-command expcol
                                   modif id new.
selection-screen: end of line.
selection-screen: begin of line.
parameters:       %alv radiobutton group func user-command outbut
                                modif id new .
selection-screen: comment 4(26) text-f72 for field %alv
                                modif id new.
parameters:       %alvl type slis_vari modif id new.
selection-screen: end of line.
selection-screen: begin of line.
parameters:       %nofunc radiobutton group func modif id old
                         default 'X' .
selection-screen: comment 4(26) text-f66 for field %nofunc
                                         modif id old.
parameters:       %tview radiobutton group func modif id old.
selection-screen: comment 34(26) text-f68 for field %tview
                                          modif id old,
                  end of line.
selection-screen: begin of line.
parameters:       %graph radiobutton group func modif id old.
selection-screen: comment 4(26) text-f61 for field %graph
                                         modif id old.
parameters:       %text radiobutton group func modif id old.
selection-screen: comment 34(26) text-f69 for field %text
                                          modif id old,
                  end of line.
selection-screen: begin of line.
parameters:       %abc radiobutton group func modif id old.
selection-screen: comment 4(26) text-f70 for field %abc
                                         modif id old.
parameters:       %excel radiobutton group func modif id old.
selection-screen: comment 34(26) text-f60 for field %excel
                                         modif id old,
                  end of line.
selection-screen: begin of line.
parameters:       %eis radiobutton group func modif id old.
selection-screen: comment 4(26) text-f63 for field %eis
                                         modif id old.
selection-screen: end of line.
selection-screen: begin of line.
parameters:       %xint radiobutton group func modif id xin.
selection-screen: comment 4(26) text-f73 for field %xint
                                         modif id xin.
parameters:       %xintk like AQXINT-XIKEY lower case modif id xin.
selection-screen: end of line.
selection-screen: begin of line.
parameters:       %down radiobutton group func modif id old.
selection-screen: comment 4(26) text-f64 for field %down
                                         modif id old.
parameters:       %path type AQ_FILENAME lower case modif id old.
selection-screen: end of line.
selection-screen: begin of line.
parameters:       %save radiobutton group func modif id lis.
selection-screen: comment 4(26) text-f62 for field %save
                                         modif id lis.
parameters:       %listid like AQCAQL-TEXT visible length 40
                  lower case modif id lis.
selection-screen: end of line.
selection-screen: end of block direct.
selection-screen: end of block prog.

data: begin of %g00 occurs 100,
            LAGP-LGNUM like LAGP-LGNUM,
            LAGP-LGTYP like LAGP-LGTYP,
            LAGP-LGPLA like LAGP-LGPLA,
            LAGP-ANZQU like LAGP-ANZQU,
            LAGP-KZLER like LAGP-KZLER,
            ZBEL like ZBEL,
            ZLEER like ZLEER,
            ZGES like ZGES,
            %alvcount type i,
      end of %g00.
data: begin of %%g00,
            LAGP-LGNUM(003),
            LAGP-LGTYP(003),
            LAGP-LGPLA(010),
            LAGP-ANZQU(007),
            LAGP-KZLER(001),
            ZBEL(011),
            ZLEER(011),
            ZGES(011),
      end of %%g00.
data %znr type i.
data %lznr type i value 99999.
field-groups header.
field-groups %fg01.
data %any-01.
data %ext-LAGP01.
field-groups %fgLAGP01.
data %sum-LAGP-ANZQU(16) type p  decimals 00 .
data %sum-ZBEL(16) type p  decimals 00 .
data %sum-ZLEER(16) type p  decimals 00 .
data %sum-ZGES(16) type p  decimals 00 .

controls tview100 type tableview using screen 100.
controls tview201 type tableview using screen 201.

AT SELECTION-SCREEN.
perform alvl_check(rsaqexce) using %alvl 'T01'.
perform testmode(rsaqexce).
perform check_expcol(rsaqexce) using %alv.


AT SELECTION-SCREEN ON VALUE-REQUEST FOR %ALVL.
perform alvl_value_request(rsaqexce) using %alvl 'T01'.

AT SELECTION-SCREEN ON VALUE-REQUEST FOR %XINTK.
perform xint_value_request(rsaqexce).

AT SELECTION-SCREEN OUTPUT.

perform save_initial_sscr(rsaqexce).
perform rinit(rsaqbrst).
perform set_expcol(rsaqexce) using %alv pb%exco.
perform alvl_set_invisible(rsaqexce).
perform set_xint_params(rsaqexce).

INITIALIZATION.
perform init_xint(rsaqexce).
%gcprog = sy-cprog.
if %gcprog(1) = '!' or
   %gcprog(1) = 'Y' or
   %gcprog(1) = 'Z'.
  %gcprog(1) = 'A'.
endif.
call function  'RSAQ_DECODE_REPORT_NAME'
     exporting reportname = %gcprog
     importing WORKSPACE  = %IQID-workspace
               USERGROUP  = %IQID-USERGROUP
               QUERY      = %IQID-QUERY.
call function  'RSAQRT_SET_IDENTIFICATION'
     exporting iqid        = %IQID
               sscr_report = %gcprog
     changing  rtmode      = %RTMODE.
perform set_www_flags(rsaqexce).
perform init_print_params(rsaqexce).

if %textpool_read is initial.
  read textpool sy-repid into %textpool_langu language sy-langu.
  %textpool_read = 'X'.
endif.
CLEAR ZBEL.
CLEAR ZLEER.
CLEAR ZGES.

START-OF-SELECTION.
insert %sum-LAGP-ANZQU into %fgLAGP01.
insert %sum-ZBEL into %fgLAGP01.
insert %sum-ZLEER into %fgLAGP01.
insert %sum-ZGES into %fgLAGP01.
insert %count-LAGP into header.
insert %linr-LAGP into header.
insert LAGP-LGNUM into %fg01.
insert LAGP-LGTYP into %fg01.
insert LAGP-LGPLA into %fg01.
insert LAGP-ANZQU into %fg01.
insert LAGP-KZLER into %fg01.
insert ZBEL into %fg01.
insert ZLEER into %fg01.
insert ZGES into %fg01.
perform init_texthandling(rsaqexce) using 'CL_TEXT_IDENTIFIER' ' ' 'ZWM_LAGP'.
"webgui
data: %ret type i.
  if sy-batch is initial and %excel is not initial.
    perform check_wingui(rsaqsyst) using %ret.
    if %ret <> 0.
      message e842(aq).
    endif.
  endif.
"webgui
perform authority_begin(rsaqexce) using 'CL_QUERY_TAB_ACCESS_AUTHORITY'.
perform authority(rsaqexce) using 'LAGP' 'CL_QUERY_TAB_ACCESS_AUTHORITY'.
perform authority_end(rsaqexce) using 'CL_QUERY_TAB_ACCESS_AUTHORITY'.
perform %comp_ldesc.
if %RTMODE is initial.
  %gcprog = sy-cprog.
  if %gcprog(1) = '!' or
     %gcprog(1) = 'Y' or
     %gcprog(1) = 'Z'.
    %gcprog(1) = 'A'.
  endif.
  call function  'RSAQ_DECODE_REPORT_NAME'
       exporting reportname = %gcprog
       importing WORKSPACE  = %IQID-workspace
                 USERGROUP  = %IQID-USERGROUP
                 QUERY      = %IQID-QUERY.
  call function  'RSAQRT_SET_IDENTIFICATION'
       exporting iqid        = %IQID
                 sscr_report = %gcprog
       changing  rtmode      = %RTMODE.
endif.
select ANZQU KZLER LGNUM LGPLA LGTYP
       into corresponding fields of LAGP
       from LAGP
       where LGNUM in ZLGNUM
         and ANZQU in SP$00004
         and KZLER in SP$00003
         and LGTYP in SP$00002.
  %dbacc = %dbacc - 1.
  if %dbacc = 0.
    stop.
  endif.
*CHECK ZLGNUM.
  ZGES   = 1.
  IF lagp-kzler = 'X'.
     ZLEER = 1.
     ZBEL  = 0.
  ELSE.
     ZLEER = 0.
     ZBEL  = 1.
  ENDIF.
  T01-LAGP-LGTYP = LAGP-LGTYP.
  add ZBEL to T01-ZBEL.
  add ZLEER to T01-ZLEER.
  add ZGES to T01-ZGES.
  collect t01.
  clear t01-ZBEL.
  clear t01-ZLEER.
  clear t01-ZGES.
  add 1 to %count-LAGP.
  %linr-LAGP = '01'.
  extract %fg01.
  %ext-LAGP01 = 'X'.
    %sum-LAGP-ANZQU = LAGP-ANZQU.
    %sum-ZBEL = ZBEL.
    %sum-ZLEER = ZLEER.
    %sum-ZGES = ZGES.
    extract %fgLAGP01.
endselect.

END-OF-SELECTION.
sort as text.
sort t01 as text
         by LAGP-LGTYP
            ZBEL
            ZLEER
            ZGES.
%diact = space.
%printon = space.
%batch = sy-batch.
if %batch <> space.
  if %eis <> space.
    %diact = 'E'.
    %printon = 'X'.
    if %eisprotocol = space.
      new-page print on destination 'NULL' no dialog
               line-size 0083 line-count 0065.
    else.
      new-page print on no dialog
               parameters %init_pri_params.
    endif.
  endif.
  if %alv <> space.
    %diact = 'V'.
    %printon = 'X'.
    %alv_layout = %alvl.
    new-page print on destination 'NULL' no dialog
             line-size 0083 line-count 0065.
  endif.
  if %save <> space.
    %diact = 'S'.
    %printon = 'X'.
    new-page print on destination 'NULL' no dialog
             line-size 0083 line-count 0065.
  endif.
elseif %called_by_www <> space.
  %diact = space.
elseif %called_by_www_alv <> space.
  %diact = 'V'.
else.
  perform init_print_params(rsaqexce).
  if %save  <> space. %diact = 'S'. endif.
  if %xint  <> space. %diact = 'I'. endif.
  if %tview <> space. %diact = 'T'. endif.
  if %alv   <> space. %diact = 'V'. endif.
  if %down  <> space. %diact = 'D'. endif.
  if %eis   <> space. %diact = 'E'. endif.
  if %graph <> space. %diact = 'G'. endif.
  if %excel <> space. %diact = 'X'. endif.
  if %text  <> space. %diact = 'W'. endif.
  if %abc   <> space. %diact = 'A'. endif.
  if %diact <> space and %diact <> 'S' and %diact <> 'W'.
    %printon = 'X'.
    new-page print on destination 'NULL' no dialog
             line-size 0083 line-count 0065.
  endif.
  %pathname = %path.
  if %diact = 'I'.
    %functionkey = %xintk.
  endif.
  if %diact = 'V'.
    %alv_layout = %alvl.
  endif.
endif.
free memory id 'AQLISTDATA'.
if %memmode <> space.
  if %batch <> space and %printon = space.
    %printon = 'X'.
    new-page print on destination 'NULL' no dialog
             line-size 0083 line-count 0065.
  endif.
  %diact = '1'.
endif.
%titel = ' '.
if sy-subty o %prflag and %titel = space.
  new-page with-title.
endif.
%tvsize = 0200.
%pline = 1.
%pzgr  = 1.
%first = 'X'.
perform %output.
%first = space.
if %diact <> space and %diact <> 'S'.
  if %batch = space.
    new-page print off.
    if not ( %diact = 'V' and %ucomm = 'PRIN' ).
      new-page no-heading no-title.
      write space.
    endif.
  endif.
else.
  perform pf-status(rsaqexce) using 'XXX XX'.
endif.
clear: %tab, %line, %cont.
if %data_selected = space.
  if %diact = '1'.
    export empty from %empty to memory id 'AQLISTDATA'.
    leave.
  else.
    if %batch = space and
       %called_by_www = space and
       %called_by_www_alv = space.
      message s260(aq).
      leave list-processing.
    else.
      if %called_by_www_alv = space.
        %diact = space.
      endif.
    endif.
  endif.
endif.
if %diact = 'S'.
  perform %save_list.
  leave list-processing.
endif.
if %diact = 'V' and %batch <> space.
  new-page print off.
  perform set_print_params(rsaqexce).
  perform %download using 'ALV'.
  leave.
endif.
if %diact = 'V' and %called_by_www_alv <> space.
  perform %download using 'ALV'.
  leave.
endif.
*if %diact = 'V' and ( %ucomm = 'PRIN' or sy-subty = '07' ).
data %is_submit_to_spool type c.
if %diact = 'V'.
  CALL FUNCTION 'IS_SUBMIT_TO_SPOOL'
    IMPORTING FLAG = %is_submit_to_spool.
  if ( %ucomm = 'PRIN' or %is_submit_to_spool = 'X' ).
    perform set_print_params(rsaqexce).
    perform %download using 'ALV'.
    set parameter id 'SPI' field sy-spono.
    leave list-processing.
  endif.
endif.
if %diact = 'P' and %batch <> space.
  perform %download using '+DAT'.
  leave list-processing.
endif.
if %diact = 'E' and %batch <> space.
  perform %download using 'EIS'.
  leave list-processing.
endif.
if %diact = '1'.
  perform %download using '+MEM'.
  leave.
endif.
if %diact = 'X'.
  set user-command 'XXL'.
elseif %diact = 'W'.
  set user-command 'TEXT'.
elseif %diact = 'V'.
  set user-command 'ALV'.
elseif %diact = 'T'.
  set user-command 'VIEW'.
elseif %diact = 'G'.
  set user-command 'GRAF'.
elseif %diact = 'A'.
  set user-command 'ABCA'.
elseif %diact = 'E'.
  set user-command 'EIS'.
elseif %diact = 'D'.
  set user-command 'DOWN'.
elseif %diact = 'I'.
  set user-command 'XINT'.
elseif %diact = 'P'.
  set user-command '+DAT'.
endif.

TOP-OF-PAGE.
perform %top-of-page.

END-OF-PAGE.
perform page_foot(rsaqexce).
perform %save_page.

TOP-OF-PAGE DURING LINE-SELECTION.
perform %top-of-page.

AT USER-COMMAND.
case sy-ucomm.
when 'EXIT'.
  leave program.
when 'RETN'.
  perform return(rsaqexce).
when 'CANC'.
  perform return(rsaqexce).
when 'WEIT'.
  perform return(rsaqexce).
when 'INHA'.
  perform catalogue(rsaqexce).
when 'AUSL'.
  perform pickup(rsaqexce).
when 'AUSW'.
  perform pickup(rsaqexce).
when 'RCAA'.
  perform rchain(rsaqbrst).
when 'RCAL'.
  perform rcall(rsaqbrst).
when 'VGLI'.
  perform change(rsaqexce).
when 'VGLE'.
  perform change(rsaqexce).
when 'TOTO'.
  perform change(rsaqexce).
when 'VSTA'.
  perform change(rsaqexce).
when 'VSTE'.
  perform return(rsaqexce).
when 'SAVL'.
  perform %save_list.
when 'ODRU'.
  perform print_list(rsaqexce).
when 'COPA'.
  perform print_cover_page(rsaqexce).
when 'TEXT'.
  perform %download using 'TEXT'.
when 'ALV'.
  perform %download using 'ALV'.
when 'VIEW'.
  perform %view.
when 'XXL'.
  perform %download using 'XXL'.
when 'GRAF'.
  perform %download using 'GRAF'.
when 'ABCA'.
  perform %download using 'ABCA'.
when 'EIS'.
  perform %download using 'EIS'.
when 'DOWN'.
  perform %download using 'DOWN'.
when 'XINT'.
  perform %download using 'XINT'.
endcase.
clear: %cline, %zgr.
clear: %tab, %line, %cont.
if %diact <> space.
  leave list-processing.
endif.


form %comp_ldesc.

*... textpool required (API calls %comp_ldesc directly)
  if %textpool_read is initial.
    read textpool sy-repid into %textpool_langu language sy-langu.
    %textpool_read = 'X'.
  endif.

  refresh %ldesc.
  refresh %gdesc.
  read table %textpool_langu into %textpool_langu_line
                             with key ID = 'I' key = 'A00'.
  if sy-subrc is initial. %txt1 = %textpool_langu_line-entry.
  else. %txt1 = %txt_unknown.
  endif.
  read table %textpool_langu into %textpool_langu_line
                             with key key = 'B00'.
  if sy-subrc is initial. %txt2 = %textpool_langu_line-entry.
  else. %txt2 = %txt_unknown.
  endif.
  read table %textpool_langu into %textpool_langu_line
                             with key key = 'H00'.
  if sy-subrc is initial. %txt3 = %textpool_langu_line-entry.
  else. %txt3 = %txt_unknown.
  endif.
  perform ldesc(rsaqexce) using 'G00010000X003       00  01'
    %txt1 %txt2 %txt3 'LAGP-LGNUM' LAGP-LGNUM 'LAGP-LGNUM'.
  read table %textpool_langu into %textpool_langu_line
                             with key ID = 'I' key = 'A01'.
  if sy-subrc is initial. %txt1 = %textpool_langu_line-entry.
  else. %txt1 = %txt_unknown.
  endif.
  read table %textpool_langu into %textpool_langu_line
                             with key key = 'B01'.
  if sy-subrc is initial. %txt2 = %textpool_langu_line-entry.
  else. %txt2 = %txt_unknown.
  endif.
  read table %textpool_langu into %textpool_langu_line
                             with key key = 'H00'.
  if sy-subrc is initial. %txt3 = %textpool_langu_line-entry.
  else. %txt3 = %txt_unknown.
  endif.
  perform ldesc(rsaqexce) using 'G00020000X003       00  01'
    %txt1 %txt2 %txt3 'LAGP-LGTYP' LAGP-LGTYP 'LAGP-LGTYP'.
  read table %textpool_langu into %textpool_langu_line
                             with key ID = 'I' key = 'A02'.
  if sy-subrc is initial. %txt1 = %textpool_langu_line-entry.
  else. %txt1 = %txt_unknown.
  endif.
  read table %textpool_langu into %textpool_langu_line
                             with key key = 'B02'.
  if sy-subrc is initial. %txt2 = %textpool_langu_line-entry.
  else. %txt2 = %txt_unknown.
  endif.
  read table %textpool_langu into %textpool_langu_line
                             with key key = 'H00'.
  if sy-subrc is initial. %txt3 = %textpool_langu_line-entry.
  else. %txt3 = %txt_unknown.
  endif.
  perform ldesc(rsaqexce) using 'G00030000X010       00  01'
    %txt1 %txt2 %txt3 'LAGP-LGPLA' LAGP-LGPLA 'LAGP-LGPLA'.
  read table %textpool_langu into %textpool_langu_line
                             with key ID = 'I' key = 'A03'.
  if sy-subrc is initial. %txt1 = %textpool_langu_line-entry.
  else. %txt1 = %txt_unknown.
  endif.
  read table %textpool_langu into %textpool_langu_line
                             with key key = 'B03'.
  if sy-subrc is initial. %txt2 = %textpool_langu_line-entry.
  else. %txt2 = %txt_unknown.
  endif.
  read table %textpool_langu into %textpool_langu_line
                             with key key = 'H00'.
  if sy-subrc is initial. %txt3 = %textpool_langu_line-entry.
  else. %txt3 = %txt_unknown.
  endif.
  perform ldesc(rsaqexce) using 'G00040021 007     X 00  01'
    %txt1 %txt2 %txt3 'LAGP-ANZQU' LAGP-ANZQU 'LAGP-ANZQU'.
  read table %textpool_langu into %textpool_langu_line
                             with key ID = 'I' key = 'A04'.
  if sy-subrc is initial. %txt1 = %textpool_langu_line-entry.
  else. %txt1 = %txt_unknown.
  endif.
  read table %textpool_langu into %textpool_langu_line
                             with key key = 'B04'.
  if sy-subrc is initial. %txt2 = %textpool_langu_line-entry.
  else. %txt2 = %txt_unknown.
  endif.
  read table %textpool_langu into %textpool_langu_line
                             with key key = 'H00'.
  if sy-subrc is initial. %txt3 = %textpool_langu_line-entry.
  else. %txt3 = %txt_unknown.
  endif.
  perform ldesc(rsaqexce) using 'G00050000X001       00  01'
    %txt1 %txt2 %txt3 'LAGP-KZLER' LAGP-KZLER 'LAGP-KZLER'.
  read table %textpool_langu into %textpool_langu_line
                             with key ID = 'I' key = 'A05'.
  if sy-subrc is initial. %txt1 = %textpool_langu_line-entry.
  else. %txt1 = %txt_unknown.
  endif.
  read table %textpool_langu into %textpool_langu_line
                             with key key = 'B05'.
  if sy-subrc is initial. %txt2 = %textpool_langu_line-entry.
  else. %txt2 = %txt_unknown.
  endif.
  read table %textpool_langu into %textpool_langu_line
                             with key key = 'H01'.
  if sy-subrc is initial. %txt3 = %textpool_langu_line-entry.
  else. %txt3 = %txt_unknown.
  endif.
  perform ldesc(rsaqexce) using 'G00060031 011     X 00  99'
    %txt1 %txt2 %txt3 'ZBEL' ZBEL 'ZBEL'.
  read table %textpool_langu into %textpool_langu_line
                             with key ID = 'I' key = 'A06'.
  if sy-subrc is initial. %txt1 = %textpool_langu_line-entry.
  else. %txt1 = %txt_unknown.
  endif.
  read table %textpool_langu into %textpool_langu_line
                             with key key = 'B06'.
  if sy-subrc is initial. %txt2 = %textpool_langu_line-entry.
  else. %txt2 = %txt_unknown.
  endif.
  read table %textpool_langu into %textpool_langu_line
                             with key key = 'H01'.
  if sy-subrc is initial. %txt3 = %textpool_langu_line-entry.
  else. %txt3 = %txt_unknown.
  endif.
  perform ldesc(rsaqexce) using 'G00070043 011     X 00  99'
    %txt1 %txt2 %txt3 'ZLEER' ZLEER 'ZLEER'.
  read table %textpool_langu into %textpool_langu_line
                             with key ID = 'I' key = 'A07'.
  if sy-subrc is initial. %txt1 = %textpool_langu_line-entry.
  else. %txt1 = %txt_unknown.
  endif.
  read table %textpool_langu into %textpool_langu_line
                             with key key = 'B07'.
  if sy-subrc is initial. %txt2 = %textpool_langu_line-entry.
  else. %txt2 = %txt_unknown.
  endif.
  read table %textpool_langu into %textpool_langu_line
                             with key key = 'H01'.
  if sy-subrc is initial. %txt3 = %textpool_langu_line-entry.
  else. %txt3 = %txt_unknown.
  endif.
  perform ldesc(rsaqexce) using 'G00080055 011     X 00  99'
    %txt1 %txt2 %txt3 'ZGES' ZGES 'ZGES'.
  read table %textpool_langu into %textpool_langu_line
                             with key ID = 'I' key = 'A08'.
  if sy-subrc is initial. %txt1 = %textpool_langu_line-entry.
  else. %txt1 = %txt_unknown.
  endif.
  read table %textpool_langu into %textpool_langu_line
                             with key key = 'B08'.
  if sy-subrc is initial. %txt2 = %textpool_langu_line-entry.
  else. %txt2 = %txt_unknown.
  endif.
  read table %textpool_langu into %textpool_langu_line
                             with key key = 'H00'.
  if sy-subrc is initial. %txt3 = %textpool_langu_line-entry.
  else. %txt3 = %txt_unknown.
  endif.
  perform ldesc(rsaqexce) using 'T01010000X003  X    01 X01 X'
    %txt1 %txt2 %txt3 'T01-LAGP-LGTYP' T01-LAGP-LGTYP 'LAGP-LGTYP'.
  read table %textpool_langu into %textpool_langu_line
                             with key ID = 'I' key = 'A09'.
  if sy-subrc is initial. %txt1 = %textpool_langu_line-entry.
  else. %txt1 = %txt_unknown.
  endif.
  read table %textpool_langu into %textpool_langu_line
                             with key key = 'B09'.
  if sy-subrc is initial. %txt2 = %textpool_langu_line-entry.
  else. %txt2 = %txt_unknown.
  endif.
  read table %textpool_langu into %textpool_langu_line
                             with key key = 'H01'.
  if sy-subrc is initial. %txt3 = %textpool_langu_line-entry.
  else. %txt3 = %txt_unknown.
  endif.
  perform ldesc(rsaqexce) using 'T01020006 011     X 02  99'
    %txt1 %txt2 %txt3 'T01-ZBEL' T01-ZBEL 'ZBEL'.
  read table %textpool_langu into %textpool_langu_line
                             with key ID = 'I' key = 'A10'.
  if sy-subrc is initial. %txt1 = %textpool_langu_line-entry.
  else. %txt1 = %txt_unknown.
  endif.
  read table %textpool_langu into %textpool_langu_line
                             with key key = 'B10'.
  if sy-subrc is initial. %txt2 = %textpool_langu_line-entry.
  else. %txt2 = %txt_unknown.
  endif.
  read table %textpool_langu into %textpool_langu_line
                             with key key = 'H01'.
  if sy-subrc is initial. %txt3 = %textpool_langu_line-entry.
  else. %txt3 = %txt_unknown.
  endif.
  perform ldesc(rsaqexce) using 'T01030018 011     X 03  99'
    %txt1 %txt2 %txt3 'T01-ZLEER' T01-ZLEER 'ZLEER'.
  read table %textpool_langu into %textpool_langu_line
                             with key ID = 'I' key = 'A11'.
  if sy-subrc is initial. %txt1 = %textpool_langu_line-entry.
  else. %txt1 = %txt_unknown.
  endif.
  read table %textpool_langu into %textpool_langu_line
                             with key key = 'B11'.
  if sy-subrc is initial. %txt2 = %textpool_langu_line-entry.
  else. %txt2 = %txt_unknown.
  endif.
  read table %textpool_langu into %textpool_langu_line
                             with key key = 'H01'.
  if sy-subrc is initial. %txt3 = %textpool_langu_line-entry.
  else. %txt3 = %txt_unknown.
  endif.
  perform ldesc(rsaqexce) using 'T01040030 011     X 04  99'
    %txt1 %txt2 %txt3 'T01-ZGES' T01-ZGES 'ZGES'.
  perform gdesc(rsaqexce) using 'G00' 1 20 ' ' ' ' 'X'.
  perform gdesc(rsaqexce) using 'T01' 1 6 ' ' ' ' 'X'.
  perform complete_ldesc(rsaqexce) tables %ldesc.

endform.

form %read_ldesc using p_lid   type aql_lid
                       p_ldesc type rsaqtldesc.

  p_lid = 'T01'.
  perform %comp_ldesc.
  p_ldesc[] = %ldesc[].

endform.


form %output.

describe table %prlist lines %max_prlist.
%head = 'AAA'.
%keyempty = space.
new-page.
%vlevel = 0.
perform %output_t01.
perform %output_gl.
perform complete_page(rsaqexce).
%head = 'ZZZ'.
perform last_ptab_entry(rsaqexce).
new-page.
if %keyempty <> space.
  message s894(aq).
endif.

endform.


form %top-of-page.

if sy-ucomm = 'INHA'. exit. endif.
if sy-ucomm = 'COPA'. exit. endif.
if %head    = space.  exit. endif.
if %head = 'DDD'.
  perform tviewpage(rsaqexce).
  exit.
endif.
if %head = 'GGG'.
  perform page(rsaqexce) using 'G00' text-grl 083 %glframe 001.
  set left scroll-boundary column 002.
  perform set_scroll_boundary(rsaqexce) using 002.
  if %toto <> space. exit. endif.
else.
  case %head.
  when 'T01'.
    %tab = 'T01'.
    concatenate 'S' '01' into %txtkey. condense %txtkey no-gaps.
    read table %textpool_langu into %textpool_langu_line
                               with key ID = 'I' key = %txtkey.
    if sy-subrc is initial. %txt1 = %textpool_langu_line-entry.
    else. %txt1 = %txt_unknown.
    endif.
    perform page(rsaqexce) using 'T01' %txt1 041 'X' 001.
  when others.
  endcase.
endif.

endform.


form %newline.

data: %llen type i.
  %llen = 083.
  %uflag = space.
  new-line.
  write: '|', 083 '|'.
  position 2.

endform.

form %skip using count.

  if sy-linno > 1.
    %uflag = space.
    do count times.
      new-line.
      format reset.
      write: '|', 083 '|'.
    enddo.
  endif.

endform.

form %uline.

  if %uflag = space.
    if sy-linno > 1.
      uline /1(083).
    endif.
    %uflag = 'X'.
  endif.

endform.

form %hide.

  if %batch <> space and %diact = 'S'.
    perform hide(rsaqexce).
  else.
    hide: %tab, %line, %cont.
  endif.

endform.

form %hide_color.

  if %batch <> space and %diact = 'S'.
    perform hide_color(rsaqexce).
  else.
    hide: %fint, %fcol.
  endif.

endform.

form %rcall using name value.

field-symbols <field>.

  assign (name) to <field>.
  if sy-subrc <> 0.
    value = space.
    exit.
  endif.
  read current line field value <field> into value.
  if value = space and %tab = 'G00' and %ldesc-fcur na 'FM'.
    read table %g00 index %line.
    if sy-subrc = 0.
      assign component %ldesc-fnameint of structure %g00
                                       to <field>.
      if sy-subrc = 0.
        write <field> to value(%ldesc-folen).
      endif.
    endif.
  endif.

endform.

form %save_page.

  if %batch <> space and %diact = 'S'.
    perform save_page(rsaqexce) tables %st_liste.
  endif.

endform.

form %replace_var using text.

field-symbols <var>.

  assign text+1(*) to <var>.

endform.

form %save_list.

data: %sflag,
      qreport like sy-repid.

  if %diact = 'S'. %sflag = 'X'. endif.
  qreport = sy-repid.
  perform save_list(rsaqexce) tables %st_liste
                              using qreport %sflag %listid.
  if %ql_id <> space.
    %dlflag = 'X'.
    %listsize = 0083.
    perform comp_selection_screen(rsaqexce).
    export %st_liste %ptab %ldesc %gdesc %dlflag %listsize
           %selections
           %g00
           t01
           to database aqldb(aq) id %ql_id.
  endif.

endform.

form %refresh.

  case %tab.
  when 'G00'.
    import %g00 from database aqldb(aq) id %ql_id.
  when 'T01'.
    import t01 from database aqldb(aq) id %ql_id.
  endcase.

endform.

form %download using code.

data: qreport like sy-repid.

  perform init_download(rsaqexce).
  qreport = sy-repid.
  case %tab.
  when 'G00'.
    perform download(rsaqexce)
            tables %g00 using code qreport text-grl.
  when 'T01'.
    concatenate 'S' '01' into %txtkey. condense %txtkey no-gaps.
    read table %textpool_langu into %textpool_langu_line
                               with key ID = 'I' key = %txtkey.
    if sy-subrc is initial. %txt1 = %textpool_langu_line-entry.
    else. %txt1 = %txt_unknown.
    endif.
    perform download(rsaqexce)
            tables t01 using code qreport %txt1.
  when others.
    message s860(aq).
  endcase.

endform.

form %set_data changing l_lines type i.

  import ldata to %g00 from memory id 'AQLISTDATA'.
  describe table %g00 lines l_lines.
  free memory id 'AQLISTDATA'.

endform.

form %get_data tables datatab structure %g00
               using  first type i
                      last  type i.

  append lines of %g00 from first to last to datatab.

endform.

form %get_ref_to_table using lid         like rsaqldesc-lid
                             ref_to_itab type ref to data
                             subrc       like sy-subrc.

  subrc = 0.
  case lid.
  when 'G00'.
    create data ref_to_itab like %g00[].
  when 'T01'.
    create data ref_to_itab like t01[].
  when others.
    subrc = 4.
    message s860(aq).
  endcase.

endform.

form %view.

data: ret type i.

  perform check_wingui(rsaqsyst) using ret.
  if ret <> 0.
    message s841(aq).
    perform %download using 'ALV'.
    exit.
  endif.

data: anz type i,
      prog like sy-repid.

  prog = sy-repid.
  perform init_download(rsaqexce).
  case %tab.
  when 'G00'.
    perform generate_view_dynpro(rsaqexce)
            using prog text-grl.
    describe table %g00 lines anz.
    tview100-lines = anz.
    perform init_view(rsaqexce) tables %g00 using tview100.
    call screen 100.
    perform reset_view_dynpro(rsaqexce).
  when 'T01'.
    concatenate 'S' '01' into %txtkey. condense %txtkey no-gaps.
    read table %textpool_langu into %textpool_langu_line
                               with key ID = 'I' key = %txtkey.
    if sy-subrc is initial. %txt1 = %textpool_langu_line-entry.
    else. %txt1 = %txt_unknown.
    endif.
    perform generate_view_dynpro(rsaqexce)
            using prog %txt1.
    describe table t01 lines anz.
    tview201-lines = anz.
    perform init_view(rsaqexce) tables t01 using tview201.
    call screen 201.
    perform reset_view_dynpro(rsaqexce).
  when others.
    message s860(aq).
  endcase.

endform.

form %colhead_print changing lines like sy-linno
                             hflag type c.
data: l_text(255),
      l_size type i.
  if %textpool_read is initial.
    read textpool sy-cprog into %textpool_langu language sy-langu.
    %textpool_read = 'X'.
  endif.
  lines = lines +  1.
  if  1 = 0. clear hflag. else. hflag = 'X'. endif.
  write at (1) '|' no-gap.
  read table %textpool_langu into %textpool_langu_line
                             with key ID = 'I' key = 'B001'.
  if sy-subrc is initial.
    l_text = %textpool_langu_line-entry.
  else.
    clear l_text.
  endif.
  perform replace_vars(rsaqexce) using l_text 'X'.
  call method cl_abap_list_utilities=>memory_offset
    exporting
      field          = l_text
      display_offset = 003
    importing
      memory_offset  = l_size.
  if l_size = 0.
    l_size = 003.
  endif.
  write at 002(003) l_text(l_size)  no-gap.
  write at (1) ' ' no-gap.
  read table %textpool_langu into %textpool_langu_line
                             with key ID = 'I' key = 'B011'.
  if sy-subrc is initial.
    l_text = %textpool_langu_line-entry.
  else.
    clear l_text.
  endif.
  perform replace_vars(rsaqexce) using l_text 'X'.
  call method cl_abap_list_utilities=>memory_offset
    exporting
      field          = l_text
      display_offset = 003
    importing
      memory_offset  = l_size.
  if l_size = 0.
    l_size = 003.
  endif.
  write at 006(003) l_text(l_size)  no-gap.
  write at (1) ' ' no-gap.
  read table %textpool_langu into %textpool_langu_line
                             with key ID = 'I' key = 'B021'.
  if sy-subrc is initial.
    l_text = %textpool_langu_line-entry.
  else.
    clear l_text.
  endif.
  perform replace_vars(rsaqexce) using l_text 'X'.
  call method cl_abap_list_utilities=>memory_offset
    exporting
      field          = l_text
      display_offset = 010
    importing
      memory_offset  = l_size.
  if l_size = 0.
    l_size = 010.
  endif.
  write at 010(010) l_text(l_size)  no-gap.
  write at (1) ' ' no-gap.
  read table %textpool_langu into %textpool_langu_line
                             with key ID = 'I' key = 'B031'.
  if sy-subrc is initial.
    l_text = %textpool_langu_line-entry.
  else.
    clear l_text.
  endif.
  perform replace_vars(rsaqexce) using l_text 'X'.
  call method cl_abap_list_utilities=>memory_offset
    exporting
      field          = l_text
      display_offset = 007
    importing
      memory_offset  = l_size.
  if l_size = 0.
    l_size = 007.
  endif.
  write at 021(007) l_text(l_size)  right-justified  no-gap.
  write at (1) ' ' no-gap.
  read table %textpool_langu into %textpool_langu_line
                             with key ID = 'I' key = 'B041'.
  if sy-subrc is initial.
    l_text = %textpool_langu_line-entry.
  else.
    clear l_text.
  endif.
  perform replace_vars(rsaqexce) using l_text 'X'.
  call method cl_abap_list_utilities=>memory_offset
    exporting
      field          = l_text
      display_offset = 001
    importing
      memory_offset  = l_size.
  if l_size = 0.
    l_size = 001.
  endif.
  write at 029(001) l_text(l_size)  no-gap.
  write at (1) ' ' no-gap.
  read table %textpool_langu into %textpool_langu_line
                             with key ID = 'I' key = 'B051'.
  if sy-subrc is initial.
    l_text = %textpool_langu_line-entry.
  else.
    clear l_text.
  endif.
  perform replace_vars(rsaqexce) using l_text 'X'.
  call method cl_abap_list_utilities=>memory_offset
    exporting
      field          = l_text
      display_offset = 011
    importing
      memory_offset  = l_size.
  if l_size = 0.
    l_size = 011.
  endif.
  write at 031(011) l_text(l_size)  right-justified  no-gap.
  write at (1) ' ' no-gap.
  read table %textpool_langu into %textpool_langu_line
                             with key ID = 'I' key = 'B061'.
  if sy-subrc is initial.
    l_text = %textpool_langu_line-entry.
  else.
    clear l_text.
  endif.
  perform replace_vars(rsaqexce) using l_text 'X'.
  call method cl_abap_list_utilities=>memory_offset
    exporting
      field          = l_text
      display_offset = 011
    importing
      memory_offset  = l_size.
  if l_size = 0.
    l_size = 011.
  endif.
  write at 043(011) l_text(l_size)  right-justified  no-gap.
  write at (1) ' ' no-gap.
  read table %textpool_langu into %textpool_langu_line
                             with key ID = 'I' key = 'B071'.
  if sy-subrc is initial.
    l_text = %textpool_langu_line-entry.
  else.
    clear l_text.
  endif.
  perform replace_vars(rsaqexce) using l_text 'X'.
  call method cl_abap_list_utilities=>memory_offset
    exporting
      field          = l_text
      display_offset = 011
    importing
      memory_offset  = l_size.
  if l_size = 0.
    l_size = 011.
  endif.
  write at 055(011) l_text(l_size)  right-justified  no-gap.
  write at (1) ' ' no-gap.
  write at 083(1) '|' no-gap.
  new-line.
endform.

form %COLHEAD_PRINT_STRL_T01 changing lines like sy-linno
                                     hflag type c.
data: l_text(255),
      l_size type i.
  if %textpool_read is initial.
    read textpool sy-cprog into %textpool_langu language sy-langu.
    %textpool_read = 'X'.
  endif.
  lines = lines +  1.
  if  1 = 0. clear hflag. else. hflag = 'X'. endif.
  write at (1) '|' no-gap.
  read table %textpool_langu into %textpool_langu_line
                             with key ID = 'I' key = 'B081'.
  if sy-subrc is initial.
    l_text = %textpool_langu_line-entry.
  else.
    clear l_text.
  endif.
  perform replace_vars(rsaqexce) using l_text 'X'.
  call method cl_abap_list_utilities=>memory_offset
    exporting
      field          = l_text
      display_offset = 003
    importing
      memory_offset  = l_size.
  if l_size = 0.
    l_size = 003.
  endif.
  write at 002(003) l_text(l_size)  no-gap.
  write at (1) '|' no-gap.
  read table %textpool_langu into %textpool_langu_line
                             with key ID = 'I' key = 'B091'.
  if sy-subrc is initial.
    l_text = %textpool_langu_line-entry.
  else.
    clear l_text.
  endif.
  perform replace_vars(rsaqexce) using l_text 'X'.
  call method cl_abap_list_utilities=>memory_offset
    exporting
      field          = l_text
      display_offset = 011
    importing
      memory_offset  = l_size.
  if l_size = 0.
    l_size = 011.
  endif.
  write at 006(011) l_text(l_size)  right-justified  no-gap.
  write at (1) '|' no-gap.
  read table %textpool_langu into %textpool_langu_line
                             with key ID = 'I' key = 'B101'.
  if sy-subrc is initial.
    l_text = %textpool_langu_line-entry.
  else.
    clear l_text.
  endif.
  perform replace_vars(rsaqexce) using l_text 'X'.
  call method cl_abap_list_utilities=>memory_offset
    exporting
      field          = l_text
      display_offset = 011
    importing
      memory_offset  = l_size.
  if l_size = 0.
    l_size = 011.
  endif.
  write at 018(011) l_text(l_size)  right-justified  no-gap.
  write at (1) '|' no-gap.
  read table %textpool_langu into %textpool_langu_line
                             with key ID = 'I' key = 'B111'.
  if sy-subrc is initial.
    l_text = %textpool_langu_line-entry.
  else.
    clear l_text.
  endif.
  perform replace_vars(rsaqexce) using l_text 'X'.
  call method cl_abap_list_utilities=>memory_offset
    exporting
      field          = l_text
      display_offset = 011
    importing
      memory_offset  = l_size.
  if l_size = 0.
    l_size = 011.
  endif.
  write at 030(011) l_text(l_size)  right-justified  no-gap.
  write at (1) '|' no-gap.
  new-line.
endform.


form %output_gl.

if %max_prlist <> 0.
  read table %prlist with key tab = 'GGG'.
  if sy-subrc <> 0.
    exit.
  endif.
endif.
set margin 00.
perform complete_page(rsaqexce).
%nochange = space.
new-page.
%glline   = 0.
%tab      = 'G00'.
%line     = 0.
%cont     = '0'.
%fint     = space.
%fcol     = '0'.
%head     = 'GGG'.
%cline    = 0.
%outflag  = space.
%outcomp  = space.
%outtotal = space.
%rflag    = 'AA'.
if %diact <> space and %diact na 'SWE'. write space. endif.
format reset.
loop.
  %data_selected = 'X'.
  at %fg01.
    %znr = '01'.
    %zgr = '01'.
    %cline = %cline + 1.
    %g00-LAGP-LGNUM = LAGP-LGNUM.
    %g00-LAGP-LGTYP = LAGP-LGTYP.
    %g00-LAGP-LGPLA = LAGP-LGPLA.
    %g00-LAGP-ANZQU = LAGP-ANZQU.
    %g00-LAGP-KZLER = LAGP-KZLER.
    %g00-ZBEL = ZBEL.
    %g00-ZLEER = ZLEER.
    %g00-ZGES = ZGES.
    if %first <> space. append %g00. endif.
    %glline = %glline + 1.
    %lznr = %znr.
    if %diact <> space and %diact na 'SWE'. continue. endif.
    perform check(rsaqexce) using ' '.
    if %rflag = 'E'. exit. endif.
    if %rflag(1) = 'A'.
    format reset.
    %fint = 'F'. %fcol = '0'.
    format color 2. %fcol = '2'.
    perform %newline.
    write 002(003) LAGP-LGNUM.
    %line = %glline.
    perform %hide.
    %line = 0.
    perform %hide_color.
    write 006(003) LAGP-LGTYP.
    write 010(010) LAGP-LGPLA.
    write 021(007) LAGP-ANZQU.
    write 029(001) LAGP-KZLER.
    write 031(011) ZBEL.
    write 043(011) ZLEER.
    write 055(011) ZGES.
    endif.
  endat.
  at last.
    %znr = 0.
    %rflag = 'AA'.
    %outtotal = 'X'.
    perform reserve(rsaqexce) using 2.
    perform %uline.
    format reset.
    format intensified on color 3.
    %fint = 'N'. %fcol = '3'.
    %nochange = 'X'.
    perform %newline.
    %nochange = space.
    write (11) text-f02.
    perform %hide.
    perform %hide_color.
      write 067 '*'.
      write 021(007) sum(%sum-LAGP-ANZQU).
      perform %hide.
      perform %hide_color.
      write 031(011) sum(%sum-ZBEL).
      write 043(011) sum(%sum-ZLEER).
      write 055(011) sum(%sum-ZGES).
  endat.
endloop.
%rflag = 'AA'.
perform %uline.
clear: %cline, %zgr.

endform.


form %output_t01.

data len type i.

if %max_prlist <> 0.
  read table %prlist with key tab = 'T01'.
  if sy-subrc <> 0.
    exit.
  endif.
endif.
%nochange = 'X'.
set margin 00.
%head = 'T01'.
clear %line.
%ustflag = 'X'.
format reset.
%fint = 'F'. %fcol = '2'.
loop at t01.
  %data_selected = 'X'.
  %tabix = sy-tabix.
  at first.
    sum.
    perform complete_page(rsaqexce).
    new-page.
    s01 = t01.
  endat.
  at new LAGP-LGTYP.
    perform complete_page(rsaqexce).
    new-page.
  endat.
  perform %t01out using space 00.
  at end of LAGP-LGTYP.
    sum.
    if %ustflag = space. uline /1(041). endif.
    perform %t01out using 'Z' 01.
    if %vlevel <= 01.
      uline /1(041).
      %ustflag = 'X'.
    endif.
  endat.
  at last.
    sum.
    if %ustflag = space. uline /1(041). endif.
    translate t01-LAGP-LGTYP using '* '.
    perform reserve(rsaqexce) using 2.
    perform %t01out using 'X' 02.
    if %vlevel <= 02.
      perform char_begin(rsaqexce) using 'T01' len.
      if len >= 5 and t01(len) = space.
        position 2.
        write at (len) text-f01 intensified on color 3.
      endif.
      uline /1(041).
    else.
      %vlevel = 02.
    endif.
    %vlevelmax = 02.
  endat.
endloop.

endform.


form %t01out using sflag vlevel.

data: eflag(1),
      lline like %line,
      curr  like %curr.

  if %vlevel > vlevel.
    exit.
  endif.
  new-line.
  if sflag = 'X'.
    format intensified on color 3.
    %fint = 'N'. %fcol = '3'.
  elseif sflag = 'Z'.
    format intensified off color 3.
    %fint = 'F'. %fcol = '3'.
  else.
    format intensified off color 2.
    %fint = 'F'. %fcol = '2'.
  endif.
  write sy-vline no-gap.
  if sflag = space.
    write (003) t01-LAGP-LGTYP no-gap intensified on color 4 .
  else.
    perform empty_field(rsaqexce) using
            t01-LAGP-LGTYP 003 eflag.
    if eflag = space.
    write (003) t01-LAGP-LGTYP no-gap .
    endif.
  endif.
  write sy-vline no-gap.
  set left scroll-boundary.
  perform set_scroll_boundary(rsaqexce) using sy-colno.
  if sflag = space.
    write (011) t01-ZBEL no-gap .
  else.
    write (011) t01-ZBEL no-gap .
  endif.
  write sy-vline no-gap.
  if sflag = space.
    write (011) t01-ZLEER no-gap .
  else.
    write (011) t01-ZLEER no-gap .
  endif.
  write sy-vline no-gap.
  if sflag = space.
    write (011) t01-ZGES no-gap .
  else.
    write (011) t01-ZGES no-gap .
  endif.
  write sy-vline no-gap.
  if sflag = space.
    %line = %line + 1.
    lline = %line.
  else.
    lline = %line.
    %line = 0.
  endif.
  perform %hide.
  perform %hide_color.
  %line = lline.
  clear %ustflag.

endform.


module %init_view output.

  case %tab.
  when 'G00'.
    perform init_pbo(rsaqexce) tables %g00 using tview100 'X'.
  when 'T01'.
    perform init_pbo(rsaqexce) tables t01 using tview201 'X'.
  when others.
    message s860(aq).
  endcase.

endmodule.

module %pbo_view output.

  case %tab.
  when 'G00'.
    perform loop_pbo(rsaqexce) tables %g00 using %%g00 tview100.
  when 'T01'.
    perform loop_pbo(rsaqexce) tables t01 using %t01 tview201.
  endcase.

endmodule.

module %pai_view input.

  case %tab.
  when 'G00'.
    perform loop_pai(rsaqexce) tables %g00 using %%g00 tview100.
  when 'T01'.
    perform loop_pai(rsaqexce) tables t01 using %t01 tview201.
  endcase.

endmodule.

module %okcode_view input.

  case %tab.
  when 'G00'.
    perform okcode(rsaqexce) tables %g00 using tview100.
  when 'T01'.
    perform okcode(rsaqexce) tables t01 using tview201.
  endcase.

endmodule.
